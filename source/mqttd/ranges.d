/**
 * 
 * /home/tomas/workspace/mqtt-d/source/serializer.d
 * 
 * Author:
 * Tomáš Chaloupka <chalucha@gmail.com>
 * 
 * Copyright (c) 2015 ${CopyrightHolder}
 * 
 * Boost Software License 1.0 (BSL-1.0)
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy
 * of the software and accompanying documentation covered by this license (the "Software") to use,
 * reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative
 * works of the Software, and to permit third-parties to whom the Software is furnished to do so,
 * all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license
 * grant, this restriction and the following disclaimer, must be included in all copies of the Software,
 * in whole or in part, and all derivative works of the Software, unless such copies or derivative works
 * are solely in the form of machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
module mqttd.ranges;

import std.range;
import mqttd.traits;
import mqttd.messages;

debug import std.stdio;
debug import std.string : format;

void write(R, T)(auto ref R output, T val) if (canSerializeTo!(R))
{
    writer(output).write(val);
}

auto writer(R)(auto ref R output) if (canSerializeTo!(R))
{
    return Writer!R(output);
}

/// simple wrapper for output range to write to
struct Writer(R) if (canSerializeTo!(R))
{
    this(ref R writer)
    {
        _output = writer;
    }

    void put(ubyte val)
    {
        _output.put(val);
    }

    static if(__traits(hasMember, R, "data"))
    {
        @property auto data()
        {
            return _output.data();
        }
    }

    static if(__traits(hasMember, R, "clear"))
    {
        void clear()
        {
            _output.clear();
        }
    }

    void write(T)(T val) if (canWrite!T)
    {
        static if (is(T == FixedHeader)) // first to avoid implicit conversion to ubyte
        {
            put(val.flags);

            int tmp = val.length;
            do
            {
                byte digit = tmp % 128;
                tmp /= 128;
                if (tmp > 0) digit |= 0x80;
                put(digit);
            } while (tmp > 0);
        }
        else static if (is(T:ubyte))
        {
            put(val);
        }
        else static if (is(T:ushort))
        {
            put(cast(ubyte) (val >> 8));
            put(cast(ubyte) val);
        }
        else static if (is(T:string))
        {
            import std.string : representation;

            enforce(val.length <= 0xFF, "String too long: ", val);

            write((cast(ushort)val.length));
            foreach(b; val.representation) put(b);
        }
        else static if (isDynamicArray!T)
        {
            foreach(ret; val) write(ret);
        }
        else static if (is(T == Topic))
        {
            write(val.filter);
            write(val.qos);
        }
    }

private:
    
    R _output;

    static assert(isOutputRange!(Writer, ubyte), "Writer is not Output range!");
}
